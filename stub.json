{"config":{"system_prompt":"","model":"","temperature":0,"top_p":1,"framework":"nextjs-page-tailwind"},"prompts":[{"prompt":"import streamlit as st\nfrom PyPDF2 import PdfReader\nfrom docx import Document\nimport openai\nimport os\nimport tempfile\n\n# Set up the page\nst.set_page_config(page_title=\"Resume Optimizer\", page_icon=\":clipboard:\", layout=\"wide\")\n\n# Define function to extract text from PDF and DOCX files\ndef extract_text_from_pdf(pdf_file_path):\n    try:\n        pdf_reader = PdfReader(pdf_file_path)\n        text = \"\".join([page.extract_text() or \"\" for page in pdf_reader.pages])\n        return text\n    except Exception as e:\n        st.error(f\"Error extracting text from PDF: {e}\")\n        return None\n\ndef extract_text_from_docx(docx_file_path):\n    try:\n        doc = Document(docx_file_path)\n        text = \"\\n\".join([paragraph.text for paragraph in doc.paragraphs])\n        return text\n    except Exception as e:\n        st.error(f\"Error extracting text from DOCX: {e}\")\n        return None\n\n# Define function to generate revised resume using AI\ndef generate_revised_resume(api_key, current_resume_text, job_description):\n    try:\n        openai.api_key = api_key\n        messages = [\n            {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n            {\"role\": \"user\", \"content\": f\"Resume:\\n{current_resume_text}\\n\\nJob Description:\\n{job_description}\"},\n            {\"role\": \"assistant\", \"content\": \"Sure, I can help rewrite this resume to better match the job description.\"}\n        ]\n        \n        response = openai.ChatCompletion.create(\n            model=\"gpt-4-vision-preview\",  # Specify the correct model here\n            messages=messages,\n            max_tokens=2500  # Adjust as needed\n        )\n\n        # Extracting the response text from the last message\n        if response.choices:\n            last_message = response.choices[-1]\n            return last_message.get(\"message\", {}).get(\"content\", \"\").strip()\n        \n        return None\n\n    except openai.error.OpenAIError as e:\n        st.error(f\"An error occurred with the AI service: {e}\")\n        return None\n    except ValueError as e:\n        st.error(f\"An error occurred: {e}\")\n        return None\n\n# Streamlit UI for API Key Input\nst.title(\"Resume Optimizer\")\napi_key = st.text_input(\"Enter your OpenAI API key\", type=\"password\")\n\nif api_key:\n    st.markdown(\"\"\"\n        ## Instructions:\n        1. Upload your current resume (PDF or Word format).\n        2. Enter the job description you're targeting.\n        3. Click 'Generate Revised Resume' to optimize your resume.\n    \"\"\")\n\n    current_resume = st.file_uploader(\"Upload Your Current Resume\", type=[\"pdf\", \"docx\"])\n    job_description = st.text_area(\"Enter the Job Description:\")\n\n    if current_resume:\n        if current_resume.type not in [\"application/pdf\", \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"]:\n            st.error(\"Unsupported file type. Please upload a PDF or Word document.\")\n        elif job_description:\n            with tempfile.NamedTemporaryFile(delete=False, suffix=os.path.splitext(current_resume.name)[-1]) as tmp_file:\n                tmp_file.write(current_resume.read())\n                tmp_file_path = tmp_file.name\n\n            if current_resume.type == \"application/pdf\":\n                current_resume_text = extract_text_from_pdf(tmp_file_path)\n            else:\n                current_resume_text = extract_text_from_docx(tmp_file_path)\n\n            os.unlink(tmp_file_path)\n\n            if current_resume_text and st.button('Generate Revised Resume'):\n                with st.spinner('Generating your optimized resume...'):\n                    revised_resume = generate_revised_resume(api_key, current_resume_text, job_description)\n                    if revised_resume:\n                        st.subheader(\"Revised Resume:\")\n                        st.text(revised_resume)\n                        st.download_button(label=\"Download Revised Resume\",\n                                           data=revised_resume,\n                                           file_name=\"optimized_resume.txt\",\n                                           mime=\"text/plain\")\n        else:\n            st.warning(\"Please enter the job description.\")\nelse:\n    st.warning(\"Please enter your OpenAI API key to use this tool.\")","md5":"97f7694867d50a679c25d9fb7470e2c3"}]}